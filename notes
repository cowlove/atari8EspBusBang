core1.cpp.20250705.203509 ran about 1900, with 5 opening nops.   increased to 8  

core1.cpp.20250705.200816 hit 3000, replaced first nops with clock wait 

core1.cpp.20250705.200357 ran to a few thousand after adding delaby before the REG_READ(r0)

core1.cpp.20250705.210627 running 2000 counting, important change seemed to be __nops__ right 
before disabling data lines .  10000+ iterations 
core1.cpp.20250705.214215 12K iterations 





        /*XXXSTART EXT*/
.L16:
.LBI363:
        ee.get_gpio_in a8
        bnez.n  a8, .L16
        rsr.ccount a11
        l8ui    a9, a3, 0
        l32i    a10, a4, 0
        extui   a9, a9, 0, 1
        /*XXX*/
        rsr.ccount a8
.LBI367:
        .file 9 "/home/jim/src/espEmptyTemplate/core1.h"
        l32r    a12, .LC14
        sub     a8, a8, a11
        extui   a8, a8, 0, 9
        addx4   a8, a8, a12
        l32i    a12, a8, 0
        addi.n  a12, a12, 1
        s32i    a12, a8, 0
        rsr.ccount a8


        /*XXXSTART INT*/
.L245:
.LBI4062:
        ee.get_gpio_in a8
        bnez.n  a8, .L245
        rsr.ccount a3
        l8ui    a9, a5, 0
        extui   a9, a9, 0, 1
        l32i    a4, a6, 0
        /*XXX*/
        rsr.ccount a8
.LBI4054:
        sub     a8, a8, a3
        extui   a8, a8, 0, 9
        addx4   a8, a8, a11
        l32i    a2, a8, 0
        addi.n  a2, a2, 1
        s32i    a2, a8, 0
        rsr.ccount a8
.LBI4058:


cp espEmptyTemplate.ino stash/espEmptyTemplate.ino.`date +%Y%m%d.%H%M%S`   && make PORT=/dev/serial/by-id/usb-Espressif_USB_JTAG_serial_debug_unit_30\:ED\:A0\:A8\:D7\:A8-if00 uc





Wow, e83b5a9c45e7c6f0c13dad5f928567ad682e8bc2 ran for 15K iterations counting...



Comparison of the current build and the legendary 36 hour build.  
Guessing that timing under 108 is key

  1.2x10  +----------------------------------------------------------------+   
          |        +         +        +        +     *  +         +        |   
        7 |                                     'timi*g.txt' u 1:2 ******* |   
    1x10  |-+                      'stash/timing.b97b0a.txt' u 1:2 #######-|   
          |                                         **                     |   
          |                                        * *                     |   
        6 |                                  #     *  *                    |   
    8x10  |-+                                #     *  *                  +-|   
          |                                  #    *   *                    |   
        6 |                                  #    *   *                    |   
    6x10  |-+                               # #   *   *                  +-|   
          |                                 # #   *   *   #                |   
        6 |                                 #*#  * #  *   #                |   
    4x10  |-+                               #*#  *##  *   ##             +-|   
          |                                 #*# **# #  # # #               |   
          |                                 # #* #  #  # # #               |   
        6 |                                #*  # #  # ## #  #              |   
    2x10  |-+                              #*  ##    ##*##  # *          +-|   
          |                                #*  ##    # *#    # *           |   
          |        +         +        +    #   #        #  **# *  +        |   
        0 +----------------------------------------------------------------+   
          80       85        90       95      100      105       110      115  
                                                                               



Investigating what broke all the recent changes: looks like declaring the busEnable masks
"volatile" lets it work.  Difference in timings:
WORKS:
  86           45            0            0  HIST
  87           15            0            0  HIST
  88           49            0            0  HIST
  89            3            0            0  HIST
  90            3            0            0  HIST
  91            2            0            0  HIST
  92           30            0            0  HIST
  93           27            0            0  HIST
  94           31            0            0  HIST
  95            7            0            0  HIST
  96            2            0            0  HIST
  97            8            0            0  HIST
  98          197            0            0  HIST
  99      5076263            0            0  HIST
 100      3084408            0            0  HIST
 101      3436051            0            0  HIST
 102      8968937            0            0  HIST
 103     11582398            0            0  HIST
 104      1412284            0            0  HIST
 105       230076            0            0  HIST
 106          233            0            0  HIST
 107       586110            0            0  HIST
 108      1631585            0            0  HIST
 109          147            0            0  HIST
 110          483            0            0  HIST
channel 0: range  86 -110, jitter  24    HIST
channel 1: range   0 -  0, jitter   0    HIST
channel 2: range   0 -  0, jitter   0    HIST

FAILS:
  82           15            0            0  HIST
  83           61            0            0  HIST
  84           30            0            0  HIST
  85            3            0            0  HIST
  86            1            0            0  HIST
  87            2            0            0  HIST
  88            4            0            0  HIST
  89           45            0            0  HIST
  90           13            0            0  HIST
  91            2            0            0  HIST
  92        15722            0            0  HIST
  93      2056623            0            0  HIST
  94      3880777            0            0  HIST
  95         1119            0            0  HIST
  96      5519168            0            0  HIST
  97      7351397            0            0  HIST
  98     13956883            0            0  HIST
  99      1533678            0            0  HIST
 100          876            0            0  HIST
 101         1691            0            0  HIST
 102       468011            0            0  HIST
 103         8726            0            0  HIST
 104      1214469            0            0  HIST
 105           23            0            0  HIST
 106           74            0            0  HIST
channel 0: range  82 -106, jitter  24    HIST
channel 1: range   0 -  0, jitter   0    HIST
channel 2: range   0 -  0, jitter   0    HIST

Maybe too early? 
       7                                                                      
  1.4x10  +----------------------------------------------------------------+   
          |          +          +          +     #   +          +          |   
        7 |                                'timin#_pass.txt' u 1:2 ******* |   
  1.2x10  |-+                              'timi##_fail.txt' u 1:2 #######-|   
          |                                     ##          *              |   
        7 |                                     # #        **              |   
    1x10  |-+                                   # #        **            +-|   
          |                                    #  #       *  *             |   
        6 |                                    #  #       *  *             |   
    8x10  |-+                                  #  #       *  *           +-|   
        6 |                                   #   #      *   *             |   
    6x10  |-+                                 #   #      *   *           +-|   
          |                                  #    #      *   *             |   
        6 |                                  #    #*     *   *             |   
    4x10  |-+                           #    #     #*   *    *           +-|   
          |                            # #  #     *#*  **     *            |   
        6 |                            # #  #     *# **       *            |   
    2x10  |-+                         #   # #     *#          *          +-|   
          |                          #    # #     *#          #       **   |   
          |          +          +    #     #     *  #+   ##  # #+   **  *  |   
        0 +----------------------------------------------------------------+   
          80         85         90         95       100        105        110  
                                                                               
******************************************************************************
******************************************************************************


b97b0a ran for 36 hours!

Good results by removing if(stop) break line and messing with "volatile" which actually seems
to improve things in cases.  Added volatile globals for disabling bus. 

  96          655            0            0  HIST
  97      4173048            0            0  HIST
  98      8664100            0            0  HIST
  99         3198            0            0  HIST
 100      6500561            0            0  HIST
 101      7862060            0            0  HIST
 102          211            0            0  HIST
 103       583660            0            0  HIST
 104      1020217            0            0  HIST
 105            6            0            0  HIST

 But don't really understand why things show slower when profiling r/w branches separately:
 99            0            0           20  HIST
 100            0            1            1  HIST
 101            0            1          510  HIST
 102            0            1          275  HIST
 103            0            0          526  HIST
 104            0            1     14384385  HIST
 105            0            0          543  HIST
 106            0            1            0  HIST
 107            0            8            2  HIST
 108            0         1126            0  HIST
 109            0         1439            0  HIST
 110            0     14419214            0  HIST




Exploring timings for using a volatile busEnableBits.  Current constant enable bits timing:
100            5  HIST
 101            4  HIST
 102           15  HIST
 103           10  HIST
 104          474  HIST
 105      5745825  HIST
 106     13798475  HIST
 107      9262265  HIST
 108          454  HIST
 109          373  HIST
 110          142  HIST




Its looking like the unicore build *can* access flash with interrupts masked, but it
still messes up core1 timing.  One idea to still allow core0 to do complex tasks is 
to have the 6502 park itself in a safe harmless loop, then disable the core1 PBI bus loop, 
allowing RAM reads to fall through to the underlying native 6502 ram (which should
contain a usable mirror of the ram contents), then.  

The 6502 parking loop can't be in PBI rom, it has to be in true 6502 rom.  Maybe the stack
is the best place to find free ram, but it would be awkward to jump to.     Pseudocode:


    
    INX
    INX
    INX

    ;; compiles to 0xad, 0x20, 0xd8, 0xd0, 0xfb, 0x60
    lda $D820            ;ESP32_IOCB_REQ # must be nonzero in the overlapped math ROM
    bne PBI_WAITREQ
    rts


New single core freertos, still have to run core0 with interrupts, but now can 
access esp_flash_read() without hanging. 
103            7  HIST
104          484  HIST
105      5746881  HIST
106     13796361  HIST
107      9263325  HIST
108          448  HIST
109          368  HIST



Ooops caught that tscFall wasn't being set until after the if(stop)
break
100      201        0        0        0  HIST
 101     1175        0        0        0  HIST
 102  7201320        0        0        0  HIST
 103  6866713        0        0        0  HIST
 104     1824        0        0        0  HIST
 105  7539330        0        0        0  HIST
 106  7200786        0        0        0  HIST
 107     1516        0        0        0  HIST
 108       13        0        0        0  HIST
 109       12        0        0        0  HIST
 110        4        0        0        0  HIST
channel 0: range  84 -110, jitter  26




Deferred calculation of (currentD1FF == 1) until the next read cycle, hidden in the 
shadow of a register write delay

 100     2043        0        0        0  HIST
 101  6268498        0        0        0  HIST
 102  2261167        0        0        0  HIST
 103   381367        0        0        0  HIST
 104      127        0        0        0  HIST
 105       57        0        0        0  HIST
 106        1        0        0        0  HIST







Looking for best place to put if (stop) break.  Going with option B
option a: line 1482 between REG_WRITEs 
99  1798740        0        0        0  HIST
 100  7584968        0        0        0  HIST
 101    81404        0        0        0  HIST
 102  5581123        0        0        0  HIST
 103  5996475        0        0        0  HIST
 104  3201891        0        0        0  HIST
 105  3718929        0        0        0  HIST
 106      546        0        0        0  HIST
 107      160        0        0        0  HIST
 108       87        0        0        0  HIST
 109   848803        0        0        0  HIST
 110      182        0        0        0  HIST
 111       11        0        0        0  HIST


option b: line 1468 replacing the nops right after falling edge
101     1570        0        0        0  HIST
 102  3769837        0        0        0  HIST
 103  4376381        0        0        0  HIST
 104   724089        0        0        0  HIST
 105  4673662        0        0        0  HIST
 106    40301        0        0        0  HIST
 107   883541        0        0        0  HIST
 108        1        0        0        0  HIST

option b: after the busy wait for the rising clock edge in writes 
103      171        0        0        0  HIST
 104  2056007        0        0        0  HIST
 105      552        0        0        0  HIST
 106     1372        0        0        0  HIST
 107  3212378        0        0        0  HIST
 108  8591582        0        0        0  HIST
 109   921388        0        0        0  HIST
 110      840        0        0        0  HIST
 111      334        0        0        0  HIST



Test loads now include artificial keychars and disk IO for core0 loop,
spreading them out a bit:  It really seems to be ANY function call
from core0 loop screws up core1 timings, even things like vector::size()
or memcpy()

22.30 lastAddr ffffffff cb 0 late 0 lateIndex -1 lateMin 9999 lateMax 0 lateTsc 00000000 0 minLoop 0 maxLoop 0 jit 0 late -1515870811
 89      217        0        0        0  HIST
 90      683        0        0        0  HIST
 91      126        0        0        0  HIST
 92       56        0        0        0  HIST
 93      179        0        0        0  HIST
 94      170        0        0        0  HIST
 95       19        0        0        0  HIST
 96       41        0        0        0  HIST
 97       45        0        0        0  HIST
 98      337        0        0        0  HIST
 99  10808393        0        0        0  HIST
 100  27337795        0        0        0  HIST
 101  27603256        0        0        0  HIST
 102  22218455        0        0        0  HIST
 103  52497157        0        0        0  HIST
 104  31511397        0        0        0  HIST
 105  19150778        0        0        0  HIST
 106    13136        0        0        0  HIST
 107    31241        0        0        0  HIST
 108     1299        0        0        0  HIST
 109     1497        0        0        0  HIST
 110  16092865        0        0        0  HIST
 111  1627770        0        0        0  HIST
 112       51        0        0        0  HIST
channel 0: range  89 -112, jitter  23




Added cowcatcher rising edge in read, seemed to tighten up timing
98        0        0        0        0  HIST
 99      458        0        0        0  HIST
 100  40964675        0        0        0  HIST
 101  59171044        0        0        0  HIST
 102  4379548        0        0        0  HIST
 103      467        0        0        0  HIST
 104     5808        0        0        0  HIST
 105  40821431        0        0        0  HIST
 106  60079593        0        0        0  HIST
 107  3436684        0        0        0  HIST
 108      265        0        0        0  HIST
 109      216        0        0        0  HIST




Just finished debugging PBI error 130.   Balanced the READ/WRITE
portions of the core1 loop a little bit.  Timings now:
99        0        0        0        0  HIST
 100     5557        0        0        0  HIST
 101  38545790        0        0        0  HIST
 102   577222        0        0        0  HIST
 103  64687361        0        0        0  HIST
 104      302        0        0        0  HIST
 105      805        0        0        0  HIST
 106  58168302        0        0        0  HIST
 107    49158        0        0        0  HIST
 108  46824042        0        0        0  HIST
 109      843        0        0        0  HIST
 110        1        0        0        0  HIST
 111      749        0        0        0  HIST
 112        0        0        0        0  HIST
 113        0        0        0        0  HIST
 114        0        0        0        0  HIST
 115        0        0        0        0  HIST
 116        0        0        0        0  HIST
 117        8        0        0        0  HIST



Experimenting with accessing PSRAM/flash from core0.   
1) PSRAM works with interrupts disabled, but smears out core1 timings about 10 ticks




Finally fixed. PBI works, runs small init code.   
channel 0: range  71 -119, jitter  48
channel 1: range  72 - 85, jitter  13
channel 2: range   0 -  0, jitter   0
channel 3: range   0 -  0, jitter   0
Total samples 57270416 implies 31.82 sec sampling





Got timing back to reasonable. 
hannel 0: range 129-140, jitter 11
channel 1: range 82-85, jitter 3
channel 2: range 100-102, jitter 2
channel 3: range 0-0, jitter 0
Total samples 91274771 implies 50.71 sec sampling




Actively drive extEnt and MPD rather than just disabling outputs.  Passes 1 min test. 
Not sure if MPD works yet, basic seems to hang with poke d1ff,1, possibly basic need mathpack
But doesn't hang in bootup as it should when os tries to access pbi init in pbiROM
timings:
channel 0: range 126-142, jitter 16
channel 1: range 79-83, jitter 4
channel 2: range 99-105, jitter 6
channel 3: range 0-0, jitter 0
Total samples 91274819 implies 50.71 sec sampling




Stripped out read tsc wait loop, trying earlier read timings 
channel 0: range 126-142, jitter 16
channel 1: range 64-69, jitter 5
channel 2: range 91-106, jitter 15
channel 3: range 0-0, jitter 0
Total samples 91274764 implies 50.71 sec sampling




Before attempting -00 and -01:
channel 0: range 109-162, jitter 53
channel 1: range 72-77, jitter 5
channel 2: range 91-131, jitter 40
channel 3: range 0-0, jitter 0
Total samples 91274826 implies 50.71 sec sampling


-01:
channel 0: range 119-153, jitter 34
channel 1: range 70-75, jitter 5
channel 2: range 94-125, jitter 31
channel 3: range 0-0, jitter 0
Total samples 59060198 implies 32.81 sec sampling

-00 doesnt work, misses lots of clocks
hannel 0: range 1-255, jitter 254
channel 1: range 67-85, jitter 18
channel 2: range 93-106, jitter 13
channel 3: range 0-0, jitter 0
Total samples 80312675 implies 44.62 sec sampling

Found bug in code, stopped investigating -O0 



timings peeking/poking d11f from basic:

channel 0: range 111-158, jitter 47
channel 1: range 70-77, jitter 7
channel 2: range 91-127, jitter 36
channel 3: range 0-0, jitter 0

89        0        0        0        0  HIST
 90        0        0        0        0  HIST
 91        0        0   318858        0  HIST
 92        0        0  2078468        0  HIST
 93        0        0  3172612        0  HIST
 94        0        0  6473902        0  HIST
 95        0        0  2077785        0  HIST
 96        0        0  7220215        0  HIST
 97        0        0  5198034        0  HIST
 98        0        0  6688274        0  HIST
 99        0        0  7919447        0  HIST
 100        0        0  6882623        0  HIST
 101        0        0  5410335        0  HIST
 102        0        0  1198364        0  HIST
 103        0        0  1417346        0  HIST
 104        0        0   394448        0  HIST
 105        0        0       28        0  HIST
 106        0        0        0        0  HIST
 107        0        0        0        0  HIST
 108        0        0        0        0  HIST
 109        0        0        0        0  HIST
 110        0        0        0        0  HIST
 111      106        0        0        0  HIST
 112     1353        0        0        0  HIST
 113     3789        0        0        0  HIST
 114      431        0     1018        0  HIST
 115     1447        0      889        0  HIST
 116      357        0      631        0  HIST
 117     1831        0        0        0  HIST
 118       18        0      963        0  HIST
 119     1455        0     3368        0  HIST
 120        0        0      700        0  HIST
 121     1547        0     1639        0  HIST
 122       11        0     1493        0  HIST
 123     2376        0     2479        0  HIST
 124      181        0     1396        0  HIST
 125        0        0      220        0  HIST
 126    11722        0      103        0  HIST
 127  2665289        0        3        0  HIST
 128  14717272        0        0        0  HIST
 129  39516867        0        0        0  HIST
 130 




                        banks[0xd800 >> bankShift] = &atariRam[0xd800];


First attempt at PBI logic, works, but does not hang in PBI init loop like it should
channel 0: range 1-254, jitter 253
channel 1: range 68-73, jitter 5
channel 2: range 89-124, jitter 35
channel 3: range 0-0, jitter 0
Total samples 48666588 implies 27.04 sec sampling



Before starting PBI logic work: no led
PREVIOUS channel 0: range 125-145, jitter 20
PREVIOUS channel 1: range 58-79, jitter 21
PREVIOUS channel 2: range 95-115, jitter 20
PREVIOUS channel 3: range 0-0, jitter 0
PREVIOUS Total samples 37805910 implies 21.00 sec sampling


PREVIOUS channel 0: range 151-165, jitter 14
PREVIOUS channel 1: range 63-68, jitter 5
PREVIOUS channel 2: range 104-118, jitter 14
PREVIOUS channel 3: range 0-0, jitter 0
RI


 168    32507        0        0  HIST
channel 0: range 151-168, jitter 17
channel 1: range 60-71, jitter 11
channel 2: range 101-118, jitter 17

with interrupts masked:
channel 0: range 127-141, jitter 14
channel 1: range 58-72, jitter 14
channel 2: range 90-104, jitter 14


ok this works on hardware pre W1TS change
hannel 0: range 125-144, jitter 19
channel 1: range 77-84, jitter 7
channel 2: range 87-104, jitter 17
channel 3: range 69-84, jitter 15
Total samples 37583735 implies 20.88 sec sampling


W1TS changes work:
channel 0: range 125-144, jitter 19
channel 1: range 74-80, jitter 6
channel 2: range 95-113, jitter 18
channel 3: range 80-94, jitter 14
Total samples 198656877 implies 110.36 sec sampling


Running the LED by sampling the histgram bucket doesnt work:
channel 0: range 10-254, jitter 244
channel 1: range 58-110, jitter 52
channel 2: range 0-0, jitter 0
channel 3: range 80-131, jitter 51
Total samples 199361016 implies 110.76 sec sampling

But just blinking the LED without sampling the histogram bucket array does work:
channel 0: range 125-143, jitter 18
channel 1: range 58-80, jitter 22
channel 2: range 95-109, jitter 14
channel 3: range 80-94, jitter 14
Total samples 198656851 implies 110.36 sec sampling


Replacing counting the hist array with the pbi loop maintaining a ramReads++ does work, but timing in the pbi loop is tight
channel 0: range 125-144, jitter 19
channel 1: range 58-72, jitter 14
channel 2: range 93-111, jitter 18
channel 3: range 0-0, jitter 0
Total samples 198656733 implies 110.36 sec sampling

q
iR
